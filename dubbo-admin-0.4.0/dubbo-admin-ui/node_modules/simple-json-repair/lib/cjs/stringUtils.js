"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertAtIndex = exports.insertBeforeLastWhitespace = exports.stripLastOccurrence = exports.normalizeQuote = exports.isQuote = exports.normalizeWhitespace = exports.isSpecialWhitespace = exports.isWhitespace = exports.isDigit = exports.isHex = exports.isAlpha = void 0;
var SINGLE_QUOTES = [
    '\'',
    '\u2018',
    '\u2019',
    '\u0060',
    '\u00B4' // acute accent
];
var DOUBLE_QUOTES = [
    '"',
    '\u201C',
    '\u201D' // double quote right
];
/**
 * Check if the given character contains an alpha character, a-z, A-Z, _
 */
function isAlpha(c) {
    return /^[a-zA-Z_]$/.test(c);
}
exports.isAlpha = isAlpha;
/**
 * Check if the given character contains a hexadecimal character 0-9, a-f, A-F
 */
function isHex(c) {
    return /^[0-9a-fA-F]$/.test(c);
}
exports.isHex = isHex;
/**
 * checks if the given char c is a digit
 */
function isDigit(c) {
    return (c >= '0' && c <= '9');
}
exports.isDigit = isDigit;
/**
 * Check if the given character is a whitespace character like space, tab, or
 * newline
 */
function isWhitespace(c) {
    return c === ' ' || c === '\t' || c === '\n' || c === '\r';
}
exports.isWhitespace = isWhitespace;
function isSpecialWhitespace(c) {
    return (c === '\u00A0' ||
        (c >= '\u2000' && c <= '\u200A') ||
        c === '\u202F' ||
        c === '\u205F' ||
        c === '\u3000');
}
exports.isSpecialWhitespace = isSpecialWhitespace;
function normalizeWhitespace(text) {
    var normalized = '';
    for (var i = 0; i < text.length; i++) {
        var char = text[i];
        normalized += isSpecialWhitespace(char)
            ? ' '
            : char;
    }
    return normalized;
}
exports.normalizeWhitespace = normalizeWhitespace;
function isQuote(c) {
    return SINGLE_QUOTES.includes(c) || DOUBLE_QUOTES.includes(c);
}
exports.isQuote = isQuote;
function normalizeQuote(c) {
    if (SINGLE_QUOTES.includes(c)) {
        return '\'';
    }
    if (DOUBLE_QUOTES.includes(c)) {
        return '"';
    }
    return c;
}
exports.normalizeQuote = normalizeQuote;
function stripLastOccurrence(text, textToStrip) {
    var index = text.lastIndexOf(textToStrip);
    return (index !== -1)
        ? text.substring(0, index) + text.substring(index + 1)
        : text;
}
exports.stripLastOccurrence = stripLastOccurrence;
function insertBeforeLastWhitespace(text, textToInsert) {
    return text.replace(/\s*$/, function (match) { return textToInsert + match; });
}
exports.insertBeforeLastWhitespace = insertBeforeLastWhitespace;
function insertAtIndex(text, textToInsert, index) {
    return text.substring(0, index) + textToInsert + text.substring(index);
}
exports.insertAtIndex = insertAtIndex;
