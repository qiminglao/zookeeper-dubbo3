{"version":3,"file":"simpleJsonRepair.js","sources":["../esm/JsonRepairError.js","../esm/stringUtils.js","../esm/simpleJsonRepair.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar JsonRepairError = /** @class */ (function (_super) {\r\n    __extends(JsonRepairError, _super);\r\n    /**\r\n     * @param {string} message  Explanatory message\r\n     * @param {number} char     Character index where the error happened\r\n     */\r\n    function JsonRepairError(message, char) {\r\n        var _this = _super.call(this, message + ' (char ' + char + ')') || this;\r\n        _this.char = char;\r\n        return _this;\r\n    }\r\n    return JsonRepairError;\r\n}(SyntaxError));\r\nexport default JsonRepairError;\r\n","var SINGLE_QUOTES = [\r\n    '\\'',\r\n    '\\u2018',\r\n    '\\u2019',\r\n    '\\u0060',\r\n    '\\u00B4' // acute accent\r\n];\r\nvar DOUBLE_QUOTES = [\r\n    '\"',\r\n    '\\u201C',\r\n    '\\u201D' // double quote right\r\n];\r\n/**\r\n * Check if the given character contains an alpha character, a-z, A-Z, _\r\n */\r\nexport function isAlpha(c) {\r\n    return /^[a-zA-Z_]$/.test(c);\r\n}\r\n/**\r\n * Check if the given character contains a hexadecimal character 0-9, a-f, A-F\r\n */\r\nexport function isHex(c) {\r\n    return /^[0-9a-fA-F]$/.test(c);\r\n}\r\n/**\r\n * checks if the given char c is a digit\r\n */\r\nexport function isDigit(c) {\r\n    return (c >= '0' && c <= '9');\r\n}\r\n/**\r\n * Check if the given character is a whitespace character like space, tab, or\r\n * newline\r\n */\r\nexport function isWhitespace(c) {\r\n    return c === ' ' || c === '\\t' || c === '\\n' || c === '\\r';\r\n}\r\nexport function isSpecialWhitespace(c) {\r\n    return (c === '\\u00A0' ||\r\n        (c >= '\\u2000' && c <= '\\u200A') ||\r\n        c === '\\u202F' ||\r\n        c === '\\u205F' ||\r\n        c === '\\u3000');\r\n}\r\nexport function normalizeWhitespace(text) {\r\n    var normalized = '';\r\n    for (var i = 0; i < text.length; i++) {\r\n        var char = text[i];\r\n        normalized += isSpecialWhitespace(char)\r\n            ? ' '\r\n            : char;\r\n    }\r\n    return normalized;\r\n}\r\nexport function isQuote(c) {\r\n    return SINGLE_QUOTES.includes(c) || DOUBLE_QUOTES.includes(c);\r\n}\r\nexport function normalizeQuote(c) {\r\n    if (SINGLE_QUOTES.includes(c)) {\r\n        return '\\'';\r\n    }\r\n    if (DOUBLE_QUOTES.includes(c)) {\r\n        return '\"';\r\n    }\r\n    return c;\r\n}\r\nexport function stripLastOccurrence(text, textToStrip) {\r\n    var index = text.lastIndexOf(textToStrip);\r\n    return (index !== -1)\r\n        ? text.substring(0, index) + text.substring(index + 1)\r\n        : text;\r\n}\r\nexport function insertBeforeLastWhitespace(text, textToInsert) {\r\n    return text.replace(/\\s*$/, function (match) { return textToInsert + match; });\r\n}\r\nexport function insertAtIndex(text, textToInsert, index) {\r\n    return text.substring(0, index) + textToInsert + text.substring(index);\r\n}\r\n","import JsonRepairError from './JsonRepairError.js';\r\nimport { insertAtIndex, insertBeforeLastWhitespace, isAlpha, isDigit, isHex, isQuote, isSpecialWhitespace, isWhitespace, normalizeQuote, normalizeWhitespace, stripLastOccurrence } from './stringUtils.js';\r\n// token types enumeration\r\nvar DELIMITER = 0;\r\nvar NUMBER = 1;\r\nvar STRING = 2;\r\nvar SYMBOL = 3;\r\nvar WHITESPACE = 4;\r\nvar COMMENT = 5;\r\nvar UNKNOWN = 6;\r\n// map with all delimiters\r\nvar DELIMITERS = {\r\n    '': true,\r\n    '{': true,\r\n    '}': true,\r\n    '[': true,\r\n    ']': true,\r\n    ':': true,\r\n    ',': true,\r\n    // for JSONP and MongoDB data type notation\r\n    '(': true,\r\n    ')': true,\r\n    ';': true,\r\n    // for string concatenation\r\n    '+': true\r\n};\r\n// map with all escape characters\r\nvar ESCAPE_CHARACTERS = {\r\n    '\"': '\"',\r\n    '\\\\': '\\\\',\r\n    '/': '/',\r\n    b: '\\b',\r\n    f: '\\f',\r\n    n: '\\n',\r\n    r: '\\r',\r\n    t: '\\t'\r\n    // \\u is handled by getToken()\r\n};\r\n// TODO: can we unify CONTROL_CHARACTERS and ESCAPE_CHARACTERS?\r\nvar CONTROL_CHARACTERS = {\r\n    '\\b': '\\\\b',\r\n    '\\f': '\\\\f',\r\n    '\\n': '\\\\n',\r\n    '\\r': '\\\\r',\r\n    '\\t': '\\\\t'\r\n};\r\nvar SYMBOLS = {\r\n    null: 'null',\r\n    true: 'true',\r\n    false: 'false'\r\n};\r\nvar PYTHON_SYMBOLS = {\r\n    None: 'null',\r\n    True: 'true',\r\n    False: 'false'\r\n};\r\nvar input = ''; // current json text\r\nvar output = ''; // generated output\r\nvar index = 0; // current index in text\r\nvar c = ''; // current token character in text\r\nvar token = ''; // current token\r\nvar tokenType = UNKNOWN; // type of current token\r\n/**\r\n * Repair a string containing an invalid JSON document.\r\n * For example changes JavaScript notation into JSON notation.\r\n *\r\n * Example:\r\n *\r\n *     repair('{name: \\'John\\'}\") // '{\"name\": \"John\"}'\r\n *\r\n */\r\nexport default function simpleJsonRepair(text) {\r\n    // initialize\r\n    input = text;\r\n    output = '';\r\n    index = 0;\r\n    c = input.charAt(0);\r\n    token = '';\r\n    tokenType = UNKNOWN;\r\n    // get first token\r\n    processNextToken();\r\n    // @ts-ignore\r\n    var isRootLevelObject = tokenType === DELIMITER && token === '{';\r\n    // parse everything\r\n    parseObject();\r\n    if (token === '') {\r\n        // reached the end of the document properly\r\n        return output;\r\n    }\r\n    if (isRootLevelObject && tokenIsStartOfValue()) {\r\n        // start of a new value after end of the root level object: looks like\r\n        // newline delimited JSON -> turn into a root level array\r\n        while (tokenIsStartOfValue()) {\r\n            output = insertBeforeLastWhitespace(output, ',');\r\n            // parse next newline delimited item\r\n            parseObject();\r\n        }\r\n        // wrap the output in an array\r\n        return \"[\\n\" + output + \"\\n]\";\r\n    }\r\n    throw new JsonRepairError('Unexpected characters', index - token.length);\r\n}\r\n/**\r\n * Get the next character from the expression.\r\n * The character is stored into the char c. If the end of the expression is\r\n * reached, the function puts an empty string in c.\r\n */\r\nfunction next() {\r\n    index++;\r\n    c = input.charAt(index);\r\n    // Note: not using input[index] because that returns undefined when index is out of range\r\n}\r\n// check whether the current token is the start of a value:\r\n// object, array, number, string, or symbol\r\nfunction tokenIsStartOfValue() {\r\n    return (tokenType === DELIMITER && (token === '[' || token === '{')) ||\r\n        tokenType === STRING ||\r\n        tokenType === NUMBER ||\r\n        tokenType === SYMBOL;\r\n}\r\n// check whether the current token is the start of a key (or possible key):\r\n// number, string, or symbol\r\nfunction tokenIsStartOfKey() {\r\n    return tokenType === STRING ||\r\n        tokenType === NUMBER ||\r\n        tokenType === SYMBOL;\r\n}\r\n/**\r\n * Process the previous token, and get next token in the current text\r\n */\r\nfunction processNextToken() {\r\n    output += token;\r\n    tokenType = UNKNOWN;\r\n    token = '';\r\n    getTokenDelimiter();\r\n    // @ts-ignore\r\n    if (tokenType === WHITESPACE) {\r\n        // we leave the whitespace as it is, except replacing special white\r\n        // space character\r\n        token = normalizeWhitespace(token);\r\n        processNextToken();\r\n    }\r\n    // @ts-ignore\r\n    if (tokenType === COMMENT) {\r\n        // ignore comments\r\n        tokenType = UNKNOWN;\r\n        token = '';\r\n        processNextToken();\r\n    }\r\n}\r\n// check for delimiters like ':', '{', ']'\r\nfunction getTokenDelimiter() {\r\n    if (DELIMITERS[c]) {\r\n        tokenType = DELIMITER;\r\n        token = c;\r\n        next();\r\n        return;\r\n    }\r\n    getTokenNumber();\r\n}\r\n// check for a number like \"2.3e+5\"\r\nfunction getTokenNumber() {\r\n    if (isDigit(c) || c === '-') {\r\n        tokenType = NUMBER;\r\n        if (c === '-') {\r\n            token += c;\r\n            next();\r\n            if (!isDigit(c)) {\r\n                throw new JsonRepairError('Invalid number, digit expected', index);\r\n            }\r\n        }\r\n        else if (c === '0') {\r\n            token += c;\r\n            next();\r\n        }\r\n        else {\r\n            // digit 1-9, nothing extra to do\r\n        }\r\n        while (isDigit(c)) {\r\n            token += c;\r\n            next();\r\n        }\r\n        if (c === '.') {\r\n            token += c;\r\n            next();\r\n            if (!isDigit(c)) {\r\n                throw new JsonRepairError('Invalid number, digit expected', index);\r\n            }\r\n            while (isDigit(c)) {\r\n                token += c;\r\n                next();\r\n            }\r\n        }\r\n        if (c === 'e' || c === 'E') {\r\n            token += c;\r\n            next();\r\n            // @ts-ignore\r\n            if (c === '+' || c === '-') {\r\n                token += c;\r\n                next();\r\n            }\r\n            if (!isDigit(c)) {\r\n                throw new JsonRepairError('Invalid number, digit expected', index);\r\n            }\r\n            while (isDigit(c)) {\r\n                token += c;\r\n                next();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getTokenString();\r\n}\r\n// get a token string like '\"hello world\"'\r\nfunction getTokenString() {\r\n    if (isQuote(c)) {\r\n        var quote = normalizeQuote(c);\r\n        token += '\"'; // output valid double quote\r\n        tokenType = STRING;\r\n        next();\r\n        // @ts-ignore\r\n        while (c !== '' && normalizeQuote(c) !== quote) {\r\n            if (c === '\\\\') {\r\n                // handle escape characters\r\n                next();\r\n                var unescaped = ESCAPE_CHARACTERS[c];\r\n                if (unescaped !== undefined) {\r\n                    token += '\\\\' + c;\r\n                    next();\r\n                    // @ts-ignore\r\n                }\r\n                else if (c === 'u') {\r\n                    // parse escaped unicode character, like '\\\\u260E'\r\n                    token += '\\\\u';\r\n                    next();\r\n                    for (var u = 0; u < 4; u++) {\r\n                        if (!isHex(c)) {\r\n                            throw new JsonRepairError('Invalid unicode character', index - token.length);\r\n                        }\r\n                        token += c;\r\n                        next();\r\n                    }\r\n                    // @ts-ignore\r\n                }\r\n                else if (c === '\\'') {\r\n                    // escaped single quote character -> remove the escape character\r\n                    token += '\\'';\r\n                    next();\r\n                }\r\n                else {\r\n                    throw new JsonRepairError('Invalid escape character \"\\\\' + c + '\"', index);\r\n                }\r\n            }\r\n            else if (CONTROL_CHARACTERS[c]) {\r\n                // unescaped special character\r\n                // fix by adding an escape character\r\n                token += CONTROL_CHARACTERS[c];\r\n                next();\r\n            }\r\n            else if (c === '\"') {\r\n                // unescaped double quote -> escape it\r\n                token += '\\\\\"';\r\n                next();\r\n            }\r\n            else {\r\n                // a regular character\r\n                token += c;\r\n                next();\r\n            }\r\n        }\r\n        if (normalizeQuote(c) !== quote) {\r\n            throw new JsonRepairError('End of string expected', index - token.length);\r\n        }\r\n        token += '\"'; // output valid double quote\r\n        next();\r\n        return;\r\n    }\r\n    getTokenAlpha();\r\n}\r\n// check for symbols (true, false, null)\r\nfunction getTokenAlpha() {\r\n    if (isAlpha(c)) {\r\n        tokenType = SYMBOL;\r\n        while (isAlpha(c) || isDigit(c) || c === '$') {\r\n            token += c;\r\n            next();\r\n        }\r\n        return;\r\n    }\r\n    getTokenWhitespace();\r\n}\r\n// get whitespaces: space, tab, newline, and carriage return\r\nfunction getTokenWhitespace() {\r\n    if (isWhitespace(c) || isSpecialWhitespace(c)) {\r\n        tokenType = WHITESPACE;\r\n        while (isWhitespace(c) || isSpecialWhitespace(c)) {\r\n            token += c;\r\n            next();\r\n        }\r\n        return;\r\n    }\r\n    getTokenComment();\r\n}\r\nfunction getTokenComment() {\r\n    // find a block comment '/* ... */'\r\n    if (c === '/' && input[index + 1] === '*') {\r\n        tokenType = COMMENT;\r\n        // @ts-ignore\r\n        while (c !== '' && (c !== '*' || (c === '*' && input[index + 1] !== '/'))) {\r\n            token += c;\r\n            next();\r\n        }\r\n        if (c === '*' && input[index + 1] === '/') {\r\n            token += c;\r\n            next();\r\n            token += c;\r\n            next();\r\n        }\r\n        return;\r\n    }\r\n    // find a comment '// ...'\r\n    if (c === '/' && input[index + 1] === '/') {\r\n        tokenType = COMMENT;\r\n        // @ts-ignore\r\n        while (c !== '' && c !== '\\n') {\r\n            token += c;\r\n            next();\r\n        }\r\n        return;\r\n    }\r\n    getTokenUnknown();\r\n}\r\n// something unknown is found, wrong characters -> a syntax error\r\nfunction getTokenUnknown() {\r\n    tokenType = UNKNOWN;\r\n    while (c !== '') {\r\n        token += c;\r\n        next();\r\n    }\r\n    throw new JsonRepairError('Syntax error in part \"' + token + '\"', index - token.length);\r\n}\r\n/**\r\n * Parse an object like '{\"key\": \"value\"}'\r\n * @return {*}\r\n */\r\nfunction parseObject() {\r\n    if (tokenType === DELIMITER && token === '{') {\r\n        processNextToken();\r\n        // @ts-ignore\r\n        // TODO: can we make this redundant?\r\n        if (tokenType === DELIMITER && token === '}') {\r\n            // empty object\r\n            processNextToken();\r\n            return;\r\n        }\r\n        while (true) {\r\n            // parse key\r\n            // @ts-ignore\r\n            if (tokenType === SYMBOL || tokenType === NUMBER) {\r\n                // unquoted key -> add quotes around it, change it into a string\r\n                tokenType = STRING;\r\n                token = \"\\\"\" + token + \"\\\"\";\r\n            }\r\n            // @ts-ignore\r\n            if (tokenType !== STRING) {\r\n                // TODO: handle ambiguous cases like '[{\"i\":1,{\"i\":2}]'\r\n                throw new JsonRepairError('Object key expected', index - token.length);\r\n            }\r\n            processNextToken();\r\n            // parse colon (key/value separator)\r\n            // @ts-ignore\r\n            if (tokenType === DELIMITER && token === ':') {\r\n                processNextToken();\r\n            }\r\n            else {\r\n                if (tokenIsStartOfValue()) {\r\n                    // we expect a colon here, but got the start of a value\r\n                    // -> insert a colon before any inserted whitespaces at the end of output\r\n                    output = insertBeforeLastWhitespace(output, ':');\r\n                }\r\n                else {\r\n                    throw new JsonRepairError('Colon expected', index - token.length);\r\n                }\r\n            }\r\n            // parse value\r\n            parseObject();\r\n            // parse comma (key/value pair separator)\r\n            // @ts-ignore\r\n            if (tokenType === DELIMITER && token === ',') {\r\n                processNextToken();\r\n                // @ts-ignore\r\n                if (tokenType === DELIMITER && token === '}') {\r\n                    // we've just passed a trailing comma -> remove the trailing comma\r\n                    output = stripLastOccurrence(output, ',');\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (tokenIsStartOfKey()) {\r\n                    // we expect a comma here, but got the start of a new key\r\n                    // -> insert a comma before any inserted whitespaces at the end of output\r\n                    output = insertBeforeLastWhitespace(output, ',');\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        if (tokenType === DELIMITER && token === '}') {\r\n            processNextToken();\r\n        }\r\n        else {\r\n            // missing end bracket -> insert the missing bracket\r\n            output = insertBeforeLastWhitespace(output, '}');\r\n        }\r\n        return;\r\n    }\r\n    parseArray();\r\n}\r\n/**\r\n * Parse an object like '[\"item1\", \"item2\", ...]'\r\n * @return {*}\r\n */\r\nfunction parseArray() {\r\n    if (tokenType === DELIMITER && token === '[') {\r\n        processNextToken();\r\n        // @ts-ignore\r\n        if (tokenType === DELIMITER && token === ']') {\r\n            // empty array\r\n            processNextToken();\r\n            return;\r\n        }\r\n        while (true) {\r\n            // parse item\r\n            parseObject();\r\n            // parse comma (item separator)\r\n            // @ts-ignore\r\n            if (tokenType === DELIMITER && token === ',') {\r\n                processNextToken();\r\n                // @ts-ignore\r\n                if (tokenType === DELIMITER && token === ']') {\r\n                    // we've just passed a trailing comma -> remove the trailing comma\r\n                    output = stripLastOccurrence(output, ',');\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (tokenIsStartOfValue()) {\r\n                    // we expect a comma here, but got the start of a new item\r\n                    // -> insert a comma before any inserted whitespaces at the end of output\r\n                    output = insertBeforeLastWhitespace(output, ',');\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        if (tokenType === DELIMITER && token === ']') {\r\n            processNextToken();\r\n        }\r\n        else {\r\n            // missing end bracket -> insert the missing bracket\r\n            output = insertBeforeLastWhitespace(output, ']');\r\n        }\r\n        return;\r\n    }\r\n    parseString();\r\n}\r\n/**\r\n * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\r\n * @return {*}\r\n */\r\nfunction parseString() {\r\n    if (tokenType === STRING) {\r\n        processNextToken();\r\n        // @ts-ignore\r\n        while (tokenType === DELIMITER && token === '+') {\r\n            // string concatenation like \"hello\" + \"world\"\r\n            token = ''; // don't output the concatenation\r\n            processNextToken();\r\n            if (tokenType === STRING) {\r\n                // concatenate with the previous string\r\n                var endIndex = output.lastIndexOf('\"');\r\n                output = output.substring(0, endIndex) + token.substring(1);\r\n                token = '';\r\n                processNextToken();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    parseNumber();\r\n}\r\n/**\r\n * Parse a number\r\n */\r\nfunction parseNumber() {\r\n    if (tokenType === NUMBER) {\r\n        processNextToken();\r\n        return;\r\n    }\r\n    parseSymbol();\r\n}\r\n/**\r\n * Parse constants true, false, null\r\n */\r\nfunction parseSymbol() {\r\n    if (tokenType === SYMBOL) {\r\n        // a supported symbol: true, false, null\r\n        if (SYMBOLS[token]) {\r\n            processNextToken();\r\n            return;\r\n        }\r\n        // for example replace None with null\r\n        if (PYTHON_SYMBOLS[token]) {\r\n            token = PYTHON_SYMBOLS[token];\r\n            processNextToken();\r\n            return;\r\n        }\r\n        // make a copy of the symbol, let's see what comes next\r\n        var symbol = token;\r\n        var symbolIndex = output.length;\r\n        token = '';\r\n        processNextToken();\r\n        // @ts-ignore\r\n        // if (tokenType === DELIMITER && token === '(') {\r\n        if (tokenType === DELIMITER && token === '(') {\r\n            // a MongoDB function call or JSONP call\r\n            // Can be a MongoDB data type like in {\"_id\": ObjectId(\"123\")}\r\n            // token = '' // do not output the function name\r\n            // processNextToken()\r\n            // next()\r\n            token = ''; // do not output the ( character\r\n            processNextToken();\r\n            // process the part inside the brackets\r\n            parseObject();\r\n            // skip the closing bracket \")\" and \");\"\r\n            // @ts-ignore\r\n            if (tokenType === DELIMITER && token === ')') {\r\n                token = ''; // do not output the ) character\r\n                processNextToken();\r\n                if (tokenType === DELIMITER && token === ';') {\r\n                    token = ''; // do not output the semicolon character\r\n                    processNextToken();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        // unknown symbol => turn into in a string\r\n        // it is possible that by reading the next token we already inserted\r\n        // extra spaces in the output which should be inside the string,\r\n        // hence the symbolIndex\r\n        output = insertAtIndex(output, \"\\\"\" + symbol, symbolIndex);\r\n        while (tokenType === SYMBOL || tokenType === NUMBER) {\r\n            processNextToken();\r\n        }\r\n        output += '\"';\r\n        return;\r\n    }\r\n    parseEnd();\r\n}\r\n/**\r\n * Evaluated when the expression is not yet ended but expected to end\r\n */\r\nfunction parseEnd() {\r\n    if (token === '') {\r\n        // syntax error or unexpected end of expression\r\n        throw new JsonRepairError('Unexpected end of json string', index - token.length);\r\n    }\r\n    else {\r\n        throw new JsonRepairError('Value expected', index - token.length);\r\n    }\r\n}\r\n"],"names":["this"],"mappings":"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"}